/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "packing_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




another::~another() noexcept {
}


void another::__set_num1(const int32_t val) {
  this->num1 = val;
}

void another::__set_num2(const int64_t val) {
  this->num2 = val;
}

void another::__set_str1(const std::string& val) {
  this->str1 = val;
}

void another::__set_num3(const double val) {
  this->num3 = val;
}
std::ostream& operator<<(std::ostream& out, const another& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t another::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num1);
          this->__isset.num1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->num2);
          this->__isset.num2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->str1);
          this->__isset.str1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->num3);
          this->__isset.num3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t another::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("another");

  xfer += oprot->writeFieldBegin("num1", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->num1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num2", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->num2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("str1", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->str1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num3", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->num3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(another &a, another &b) {
  using ::std::swap;
  swap(a.num1, b.num1);
  swap(a.num2, b.num2);
  swap(a.str1, b.str1);
  swap(a.num3, b.num3);
  swap(a.__isset, b.__isset);
}

another::another(const another& other0) {
  num1 = other0.num1;
  num2 = other0.num2;
  str1 = other0.str1;
  num3 = other0.num3;
  __isset = other0.__isset;
}
another& another::operator=(const another& other1) {
  num1 = other1.num1;
  num2 = other1.num2;
  str1 = other1.str1;
  num3 = other1.num3;
  __isset = other1.__isset;
  return *this;
}
void another::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "another(";
  out << "num1=" << to_string(num1);
  out << ", " << "num2=" << to_string(num2);
  out << ", " << "str1=" << to_string(str1);
  out << ", " << "num3=" << to_string(num3);
  out << ")";
}


heavy::~heavy() noexcept {
}


void heavy::__set_num1(const int32_t val) {
  this->num1 = val;
}

void heavy::__set_num2(const double val) {
  this->num2 = val;
}

void heavy::__set_str1(const std::string& val) {
  this->str1 = val;
}

void heavy::__set_bool1(const bool val) {
  this->bool1 = val;
}

void heavy::__set_an(const another& val) {
  this->an = val;
}
std::ostream& operator<<(std::ostream& out, const heavy& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t heavy::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num1);
          this->__isset.num1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->num2);
          this->__isset.num2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->str1);
          this->__isset.str1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->bool1);
          this->__isset.bool1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->an.read(iprot);
          this->__isset.an = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t heavy::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("heavy");

  xfer += oprot->writeFieldBegin("num1", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->num1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num2", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->num2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("str1", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->str1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bool1", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->bool1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("an", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->an.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(heavy &a, heavy &b) {
  using ::std::swap;
  swap(a.num1, b.num1);
  swap(a.num2, b.num2);
  swap(a.str1, b.str1);
  swap(a.bool1, b.bool1);
  swap(a.an, b.an);
  swap(a.__isset, b.__isset);
}

heavy::heavy(const heavy& other2) {
  num1 = other2.num1;
  num2 = other2.num2;
  str1 = other2.str1;
  bool1 = other2.bool1;
  an = other2.an;
  __isset = other2.__isset;
}
heavy& heavy::operator=(const heavy& other3) {
  num1 = other3.num1;
  num2 = other3.num2;
  str1 = other3.str1;
  bool1 = other3.bool1;
  an = other3.an;
  __isset = other3.__isset;
  return *this;
}
void heavy::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "heavy(";
  out << "num1=" << to_string(num1);
  out << ", " << "num2=" << to_string(num2);
  out << ", " << "str1=" << to_string(str1);
  out << ", " << "bool1=" << to_string(bool1);
  out << ", " << "an=" << to_string(an);
  out << ")";
}


