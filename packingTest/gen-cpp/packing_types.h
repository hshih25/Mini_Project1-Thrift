/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef packing_TYPES_H
#define packing_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>




class another;

class heavy;

typedef struct _another__isset {
  _another__isset() : num1(false), num2(false), str1(false), num3(false) {}
  bool num1 :1;
  bool num2 :1;
  bool str1 :1;
  bool num3 :1;
} _another__isset;

class another : public virtual ::apache::thrift::TBase {
 public:

  another(const another&);
  another& operator=(const another&);
  another() noexcept
          : num1(0),
            num2(0),
            str1(),
            num3(0) {
  }

  virtual ~another() noexcept;
  int32_t num1;
  int64_t num2;
  std::string str1;
  double num3;

  _another__isset __isset;

  void __set_num1(const int32_t val);

  void __set_num2(const int64_t val);

  void __set_str1(const std::string& val);

  void __set_num3(const double val);

  bool operator == (const another & rhs) const
  {
    if (!(num1 == rhs.num1))
      return false;
    if (!(num2 == rhs.num2))
      return false;
    if (!(str1 == rhs.str1))
      return false;
    if (!(num3 == rhs.num3))
      return false;
    return true;
  }
  bool operator != (const another &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const another & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(another &a, another &b);

std::ostream& operator<<(std::ostream& out, const another& obj);

typedef struct _heavy__isset {
  _heavy__isset() : num1(false), num2(false), str1(false), bool1(false), an(false) {}
  bool num1 :1;
  bool num2 :1;
  bool str1 :1;
  bool bool1 :1;
  bool an :1;
} _heavy__isset;

class heavy : public virtual ::apache::thrift::TBase {
 public:

  heavy(const heavy&);
  heavy& operator=(const heavy&);
  heavy() noexcept
        : num1(0),
          num2(0),
          str1(),
          bool1(0) {
  }

  virtual ~heavy() noexcept;
  int32_t num1;
  double num2;
  std::string str1;
  bool bool1;
  another an;

  _heavy__isset __isset;

  void __set_num1(const int32_t val);

  void __set_num2(const double val);

  void __set_str1(const std::string& val);

  void __set_bool1(const bool val);

  void __set_an(const another& val);

  bool operator == (const heavy & rhs) const
  {
    if (!(num1 == rhs.num1))
      return false;
    if (!(num2 == rhs.num2))
      return false;
    if (!(str1 == rhs.str1))
      return false;
    if (!(bool1 == rhs.bool1))
      return false;
    if (!(an == rhs.an))
      return false;
    return true;
  }
  bool operator != (const heavy &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const heavy & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(heavy &a, heavy &b);

std::ostream& operator<<(std::ostream& out, const heavy& obj);



#endif
